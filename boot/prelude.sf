
-- Synonym for sized types
Type : Layout -> Type? (sta zero)
Type l = Type? (sta l)

-- Generating data
Make : [b] (A : Type? b) -> Type idx
give : [b] [A : Type b] (a : A) -> Make A
push : [b] [A : Type b] (a : Make A) -> A

-- Unit

#primitive
UNIT : TYPE

-- #primitive
-- ttS : UNIT

-- #primitive
-- Unit : (l : Layout?) -> Type? l

-- #primitive
-- tt : [l] -> Unit l

-- -- Irrelevance
-- Irr : [b] (A : Type? b) -> Type zero
-- irr : [b] [A : Type b] (a : A) -> Irr A

-- -- Sigma
-- SIGMA : (A : TYPE) -> (A -> TYPE) -> TYPE
-- pairS : [A : TYPE] [B : A -> TYPE] (a : A) (b : B a) -> SIGMA A B
-- fstS : [A : TYPE] [B : A -> TYPE] (p : SIGMA A B) -> A
-- sndS : [A : TYPE] [B : A -> TYPE] (p : SIGMA A B) -> B (fstS p)
-- Sigma : [a] (A : Type? a) [b] (B : Irr A -> Type? b) -> Type? (seq? a b)

-- -- IO
-- IO : [a] (A : Type a) -> Type ptr
-- io-bind : [a] [A : Type a] (m : IO A) (f : A -> IO b) -> IO b
-- io-return : [a] [A : Type a] (a : A) -> IO A