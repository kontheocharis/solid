#mta
#primitive
UNIT : TYPE

#mta
#primitive
TT : UNIT

-- #primitive
-- IO : [a : Layout] (A : Type a) -> Type ptr

-- Sigma
#mta
#primitive
SIGMA : (A : TYPE) -> (B : A -> TYPE) -> TYPE

#mta
#primitive
PAIR : [A : TYPE] [B : A -> TYPE] (a : A) (b : B a) -> SIGMA A B

#primitive
Unit : Type zero

#primitive
tt : Unit

-- Some tests

#mta
Nat : TYPE
Nat = [P : TYPE] -> P -> (P -> P) -> P

#mta
zero : Nat
zero z s = z

#mta
succ : Nat -> Nat
succ n z s = s (n z s)

#mta
rec : (N : TYPE) -> N -> (N -> N) -> Nat -> N
rec N z s n = n z s

#mta
add : Nat -> Nat -> Nat
add x y = ?asj

#mta
id : [a : Layout] -> Code ([A : Type a] -> A -> A)
id = ?Fsdjf

#debug-ctx ()

-- Synonym for sized types
-- #mta
-- Type : Layout -> Type? (sta zero)
-- Type l = Type? (sta l)

-- Generating data
-- #primitive
-- Make : [b] (A : Type? b) -> Type idx

-- #primitive
-- give : [b] [A : Type b] (a : A) -> Make A

-- #primitive
-- push : [b] [A : Type b] (a : Make A) -> A

-- -- Unit


-- #primitive
-- Unit : (l : Layout?) -> Type? l

-- #primitive
-- tt : [l] -> Unit l

-- -- Irrelevance
-- #primitive
-- Irr : [b] (A : Type? b) -> Type zero

-- #primitive
-- irr : [b] [A : Type b] (a : A) -> Irr A

-- -- Sigma
-- #primitive
-- SIGMA : (A : TYPE) -> (A -> TYPE) -> TYPE

-- #primitive
-- pairS : [A : TYPE] [B : A -> TYPE] (a : A) (b : B a) -> SIGMA A B

-- #primitive
-- fstS : [A] [B] (p : SIGMA A B) -> A

-- #primitive
-- sndS : [A : TYPE] [B : A -> TYPE] (p : SIGMA A B) -> B (fstS p)

-- #primitive
-- Sigma : [a] (A : Type? a) [b] (B : Irr A -> Type? b) -> Type? (seq? a b)

-- #primitive
-- pair : [a] [A] [b] [B] (a : A) (b : B a) -> Sigma A B

-- #primitive
-- fst : [a] [A] [b] [B] (p : SIGMA A B) -> A

-- #primitive
-- snd : [a] [A] [b] [B] (p : SIGMA A B) -> B (fst p)

-- -- IO
-- #primitive
-- IO : [a] (A : Type a) -> Type ptr

-- #primitive
-- io-bind : [a] [A : Type a] (m : IO A) (f : A -> IO b) -> IO b

-- #primitive
-- io-return : [a] [A : Type a] (a : A) -> IO A